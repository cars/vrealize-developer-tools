name: Build
on:
  push:
    branches:
      - "*"
    tags-ignore:
      - "v*"
  pull_request:
    branches:
      - master
jobs:
  cleanup-runs: # automatically cancel CI runs on pushes to the same branch
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  build:
    name: Node.js v${{ matrix.node-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [10.x, 12.x]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
    steps:
      # - name: Set git config
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   run: git config --global core.autocrlf true

      - uses: actions/checkout@v2

      - name: echo github.ref
        run: echo ${{ github.ref }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set version number of package.json and build artifact
        id: version_step
        if: runner.os == 'Linux'
        env:
          GH_EVENT: ${{ toJSON(github.event) }}
          RUN_NUMBER: ${{ github.run_number }}
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PR_NUMBER=$(echo -n GH_EVENT | jq ".pull_request.number")
          if [ "$PR_NUMBER" != "null" ]; then
            VERSION_STRING=${PACKAGE_VERSION}-pr${PR_NUMBER}-$(git rev-parse --short HEAD)
          else
            VERSION_STRING=${PACKAGE_VERSION}-nightly-$(git rev-parse --short HEAD)
          fi

          yarn version --no-git-tag-version --new-version $VERSION_STRING
          echo "::set-output name=version_build::${VERSION_STRING}+${RUN_NUMBER}"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-${{ hashFiles('./yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: "yarn install --frozen-lockfile --ignore-engines"

      - name: Build VSIX package
        run: "node node_modules/gulp/bin/gulp.js package"

      - name: Publish code coverage report
        uses: codecov/codecov-action@v1
        if: runner.os == 'Linux'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: "**/coverage/*.json"
          yml: ./codecov.yml
          flags: unittest
          name: codecov

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: vrealize-developer-tools-${{steps.version_step.outputs.version_build}}.vsix
          path: "*.vsix"
